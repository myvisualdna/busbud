{"ast":null,"code":"{\n  /* \n  //Definimos el state inicial: a qui sera un objeto llamado\n  //\"weatherInformation\" que esta vacio. El reducer se asegurara\n  //de chequear la accion que recibe, si coincide con el type que\n  //espera, va a modificar el state con la info que contenga el\n  //payload de la action\n  const initialState = {\n   allDepartures: [],\n  };\n  //Creamos el reducer, recibe el state inicial y una action\n  const fetchDepartures = (state = initialState, action) => {\n   switch (action.type) {\n     case \"FETCH_DEPARTURES\":\n       return {\n         ...state,\n         allDepartures: action.payload\n       };\n     default:\n       return  { ...state };\n   }\n   //si esa accion coincide con el nombre \"FETCH_WEATHER\"\n   //El objeto vacio llamado weatherInformation que integra el\n   //state se va a llenar con la info que trae el payload de la action\n   if (action.type === \"FETCH_DEPARTURES\") {\n     state = { ...state, allDepartures: action.payload };\n     //Al final devolvemos el state ya actualizado\n   }\n   return state;\n  };\n  export default fetchDepartures;\n  */\n}","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/reducers/reducerDepartures.js"],"names":[],"mappings":"AACA;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIG","sourcesContent":["\n{/* \n\n//Definimos el state inicial: a qui sera un objeto llamado\n//\"weatherInformation\" que esta vacio. El reducer se asegurara\n//de chequear la accion que recibe, si coincide con el type que\n//espera, va a modificar el state con la info que contenga el\n//payload de la action\nconst initialState = {\n  allDepartures: [],\n};\n\n//Creamos el reducer, recibe el state inicial y una action\nconst fetchDepartures = (state = initialState, action) => {\n  switch (action.type) {\n    case \"FETCH_DEPARTURES\":\n      return {\n        ...state,\n        allDepartures: action.payload\n      };\n    default:\n      return  { ...state };\n  }\n  //si esa accion coincide con el nombre \"FETCH_WEATHER\"\n  //El objeto vacio llamado weatherInformation que integra el\n  //state se va a llenar con la info que trae el payload de la action\n  if (action.type === \"FETCH_DEPARTURES\") {\n    state = { ...state, allDepartures: action.payload };\n    //Al final devolvemos el state ya actualizado\n  }\n  return state;\n};\n\nexport default fetchDepartures;\n\n*/}"]},"metadata":{},"sourceType":"script"}
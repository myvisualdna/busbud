{"ast":null,"code":"//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nimport FetchDepartures from \"./fetchDepartures\";\nvar token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nvar headers = {\n  Authorization: \"Bearer \".concat(token)\n}; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchAction(city) {\n  Promise.all(); //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n  return function (dispatch) {\n    request.then(function (_ref) {\n      var data = _ref.data;\n      dispatch({\n        type: \"FETCH_ACTION\",\n        payload: data\n      });\n      console.log(data); //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      dispatch(FetchDepartures());\n    });\n  };\n}\n_c = FetchAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchAction\");","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/actions/fetchAction.js"],"names":["axios","FetchDepartures","token","headers","Authorization","FetchAction","city","Promise","all","dispatch","request","then","data","type","payload","console","log"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,IAAMC,KAAK,GAAG,gCAAd;AACA,IAAMC,OAAO,GAAG;AAAEC,EAAAA,aAAa,mBAAYF,KAAZ;AAAf,CAAhB,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASG,WAAT,CAAqBC,IAArB,EAA2B;AACxCC,EAAAA,OAAO,CAACC,GAAR,GADwC,CAIxC;AACA;AACA;AACA;AACA;;AACA,SAAO,UAACC,QAAD,EAAc;AACnBC,IAAAA,OAAO,CAACC,IAAR,CAAa,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACzBH,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,OAAO,EAAEF;AAAjC,OAAD,CAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAFyB,CAIzB;AACA;AACA;;AAEAH,MAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACD,KATD;AAUD,GAXD;AAYD;KArBuBI,W","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\nimport FetchDepartures from \"./fetchDepartures\";\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nconst headers = { Authorization: `Bearer ${token}` };\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchAction(city) {\n  Promise.all()\n\n\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_ACTION\", payload: data });\n      console.log(data);\n\n      //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      dispatch(FetchDepartures());\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
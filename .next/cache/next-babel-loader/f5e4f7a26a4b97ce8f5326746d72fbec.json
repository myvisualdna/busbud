{"ast":null,"code":"import _defineProperty from \"/Users/andresnieves/Documents/React/busbud/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//Definimos el state inicial: a qui sera un objeto llamado\n//\"weatherInformation\" que esta vacio. El reducer se asegurara\n//de chequear la accion que recibe, si coincide con el type que\n//espera, va a modificar el state con la info que contenga el\n//payload de la action\nvar initialState = {\n  mainInformation: {},\n  allDepartures: action.payload\n}; //Creamos el reducer, recibe el state inicial y una action\n\nvar firstFetch = function firstFetch() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCH_ACTION':\n      return Object.assign({}, state, {\n        mainInformation: action.payload\n      });\n\n    case 'FETCH_DEPARTURES':\n      return Object.assign({}, state, {\n        allDepartures: action.payload\n      });\n\n    case 'LOCKS_FETCH_SUCCESS':\n      return Object.assign({}, state, {\n        locks: action.locks\n      });\n\n    default:\n      return state;\n  } //si esa accion coincide con el nombre \"FETCH_WEATHER\"\n  //El objeto vacio llamado weatherInformation que integra el\n  //state se va a llenar con la info que trae el payload de la action\n\n\n  if (action.type === \"FETCH_ACTION\") {\n    state = _objectSpread(_objectSpread({}, state), {}, {\n      mainInformation: action.payload\n    }); //Al final devolvemos el state ya actualizado\n  }\n\n  return state;\n};\n\nexport default firstFetch;","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/reducers/reducerAction.js"],"names":["initialState","mainInformation","allDepartures","action","payload","firstFetch","state","type","Object","assign","locks"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,EADE;AAEnBC,EAAAA,aAAa,EAAEC,MAAM,CAACC;AAFH,CAArB,C,CAKA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXG,MAAW;;AAEnD,UAAQA,MAAM,CAACI,IAAf;AACE,SAAK,cAAL;AACI,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,EAAyB;AAACL,QAAAA,eAAe,EAAEE,MAAM,CAACC;AAAzB,OAAzB,CAAP;;AACJ,SAAK,kBAAL;AACI,aAAOI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,EAAyB;AAACJ,QAAAA,aAAa,EAAEC,MAAM,CAACC;AAAvB,OAAzB,CAAP;;AACJ,SAAK,qBAAL;AACI,aAAOI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,EAAyB;AAACI,QAAAA,KAAK,EAAEP,MAAM,CAACO;AAAf,OAAzB,CAAP;;AACJ;AACI,aAAOJ,KAAP;AARN,GAFmD,CAYnD;AACA;AACA;;;AACA,MAAIH,MAAM,CAACI,IAAP,KAAgB,cAApB,EAAoC;AAClCD,IAAAA,KAAK,mCAAQA,KAAR;AAAeL,MAAAA,eAAe,EAAEE,MAAM,CAACC;AAAvC,MAAL,CADkC,CAElC;AACD;;AACD,SAAOE,KAAP;AACD,CApBD;;AAsBA,eAAeD,UAAf","sourcesContent":["//Definimos el state inicial: a qui sera un objeto llamado\n//\"weatherInformation\" que esta vacio. El reducer se asegurara\n//de chequear la accion que recibe, si coincide con el type que\n//espera, va a modificar el state con la info que contenga el\n//payload de la action\nconst initialState = {\n  mainInformation: {},\n  allDepartures: action.payload\n};\n\n//Creamos el reducer, recibe el state inicial y una action\nconst firstFetch = (state = initialState, action) => {\n\n  switch (action.type) {\n    case 'FETCH_ACTION':\n        return Object.assign({}, state, {mainInformation: action.payload});\n    case 'FETCH_DEPARTURES':\n        return Object.assign({}, state, {allDepartures: action.payload});\n    case 'LOCKS_FETCH_SUCCESS':\n        return Object.assign({}, state, {locks: action.locks});\n    default:\n        return state;\n}\n  //si esa accion coincide con el nombre \"FETCH_WEATHER\"\n  //El objeto vacio llamado weatherInformation que integra el\n  //state se va a llenar con la info que trae el payload de la action\n  if (action.type === \"FETCH_ACTION\") {\n    state = { ...state, mainInformation: action.payload };\n    //Al final devolvemos el state ya actualizado\n  }\n  return state;\n};\n\nexport default firstFetch;\n"]},"metadata":{},"sourceType":"module"}
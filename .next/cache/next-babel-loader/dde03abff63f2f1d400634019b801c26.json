{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//Definimos el state inicial: a qui sera un objeto llamado\n//\"weatherInformation\" que esta vacio. El reducer se asegurara\n//de chequear la accion que recibe, si coincide con el type que\n//espera, va a modificar el state con la info que contenga el\n//payload de la action\nconst initialState = {\n  allDepartures: []\n}; //Creamos el reducer, recibe el state inicial y una action\n\nconst fetchDepartures = (state = initialState, action) => {\n  switch (action.type) {\n    case 'TOGGLE_CHECKBOX':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkboxes: state.checkboxes.map(check => check.id === action.id ? _objectSpread(_objectSpread({}, check), {}, {\n          completed: action.completed\n        }) : check)\n      });\n\n    default:\n      return state;\n  } //si esa accion coincide con el nombre \"FETCH_WEATHER\"\n  //El objeto vacio llamado weatherInformation que integra el\n  //state se va a llenar con la info que trae el payload de la action\n\n\n  if (action.type === \"FETCH_DEPARTURES\") {\n    state = _objectSpread(_objectSpread({}, state), {}, {\n      allDepartures: action.payload\n    }); //Al final devolvemos el state ya actualizado\n  }\n\n  return state;\n};\n\nexport default fetchDepartures;","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/reducers/reducerDepartures.js"],"names":["initialState","allDepartures","fetchDepartures","state","action","type","checkboxes","map","check","id","completed","payload"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE;AADI,CAArB,C,CAIA;;AACA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,UAAU,EAAEH,KAAK,CAACG,UAAN,CAAiBC,GAAjB,CAAqBC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaL,MAAM,CAACK,EAApB,mCACpCD,KADoC;AAC7BE,UAAAA,SAAS,EAAEN,MAAM,CAACM;AADW,aAExCF,KAFU;AAFd;;AAOF;AACE,aAAOL,KAAP;AAVJ,GADwD,CAaxD;AACA;AACA;;;AACA,MAAIC,MAAM,CAACC,IAAP,KAAgB,kBAApB,EAAwC;AACtCF,IAAAA,KAAK,mCAAQA,KAAR;AAAeF,MAAAA,aAAa,EAAEG,MAAM,CAACO;AAArC,MAAL,CADsC,CAEtC;AACD;;AACF,SAAOR,KAAP;AACA,CArBD;;AAuBA,eAAeD,eAAf","sourcesContent":["//Definimos el state inicial: a qui sera un objeto llamado\n//\"weatherInformation\" que esta vacio. El reducer se asegurara\n//de chequear la accion que recibe, si coincide con el type que\n//espera, va a modificar el state con la info que contenga el\n//payload de la action\nconst initialState = {\n  allDepartures: [],\n};\n\n//Creamos el reducer, recibe el state inicial y una action\nconst fetchDepartures = (state = initialState, action) => {\n  switch (action.type) {\n    case 'TOGGLE_CHECKBOX':\n      return {\n        ...state,\n        checkboxes: state.checkboxes.map(check => check.id === action.id ?\n          {...check, completed: action.completed} :\n          check\n        )\n      };\n    default:\n      return state;\n    }\n  //si esa accion coincide con el nombre \"FETCH_WEATHER\"\n  //El objeto vacio llamado weatherInformation que integra el\n  //state se va a llenar con la info que trae el payload de la action\n  if (action.type === \"FETCH_DEPARTURES\") {\n    state = { ...state, allDepartures: action.payload };\n    //Al final devolvemos el state ya actualizado\n  }\n return state;\n};\n\nexport default fetchDepartures;\n"]},"metadata":{},"sourceType":"module"}
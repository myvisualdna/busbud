{"ast":null,"code":"//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nimport FetchDepartures from \"./fetchDepartures\";\nvar token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\"; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchAction(date) {\n  console.log(date);\n  var request = axios.get(\"https://napi.busbud.com/x-departures/f2m673/f25dvk/\".concat(date), {\n    headers: {\n      Accept: \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n      \"X-Busbud-Token\": \"\".concat(token)\n    }\n  });\n  var requestTwo = axios.get(\"https://napi.busbud.com/x-departures/f2m673/f25dvk/\".concat(date, \"/poll\"), {\n    headers: {\n      Accept: \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n      \"X-Busbud-Token\": \"\".concat(token)\n    }\n  }); //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n  return function (dispatch) {\n    request.then(function (_ref) {\n      var data = _ref.data;\n      dispatch({\n        type: \"FETCH_ACTION\",\n        payload: data\n      }); //////\n\n      requestTwo.then(function (_ref2) {\n        var data = _ref2.data;\n        var timer = setTimeout(function () {\n          dispatch({\n            type: \"FETCH_DEPARTURES\",\n            payload: data\n          });\n        }, 2000);\n        return function () {\n          return timer;\n        };\n        dispatch({\n          type: \"FETCH_DEPARTURES\",\n          payload: data\n        });\n      })[\"catch\"](function (error) {\n        console.err(error);\n      });\n      console.log(data); //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n      //dispatch(FetchDepartures());\n    });\n  };\n}\n_c = FetchAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchAction\");","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/actions/fetchAction.js"],"names":["axios","FetchDepartures","token","FetchAction","date","console","log","request","get","headers","Accept","requestTwo","dispatch","then","data","type","payload","timer","setTimeout","error","err"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,IAAMC,KAAK,GAAG,gCAAd,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,MAAMG,OAAO,GAAGP,KAAK,CAACQ,GAAN,8DACwCJ,IADxC,GAEd;AACEK,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,+EAFK;AAGP,kCAAqBR,KAArB;AAHO;AADX,GAFc,CAAhB;AAWA,MAAMS,UAAU,GAAGX,KAAK,CAACQ,GAAN,8DACqCJ,IADrC,YAEjB;AACEK,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,+EAFK;AAGP,kCAAqBR,KAArB;AAHO;AADX,GAFiB,CAAnB,CAbwC,CAwBxC;AACA;AACA;AACA;AACA;;AACA,SAAO,UAACU,QAAD,EAAc;AACnBL,IAAAA,OAAO,CAACM,IAAR,CAAa,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACzBF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,OAAO,EAAEF;AAAjC,OAAD,CAAR,CADyB,CAEzB;;AACAH,MAAAA,UAAU,CACPE,IADH,CACQ,iBAAc;AAAA,YAAXC,IAAW,SAAXA,IAAW;AAClB,YAAMG,KAAK,GAAGC,UAAU,CAAC,YAAM;AAC7BN,UAAAA,QAAQ,CAAC;AAAEG,YAAAA,IAAI,EAAE,kBAAR;AAA4BC,YAAAA,OAAO,EAAEF;AAArC,WAAD,CAAR;AACD,SAFuB,EAErB,IAFqB,CAAxB;AAGA,eAAO;AAAA,iBAAMG,KAAN;AAAA,SAAP;AACAL,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,OAAO,EAAEF;AAArC,SAAD,CAAR;AACD,OAPH,WAQS,UAACK,KAAD,EAAW;AAChBd,QAAAA,OAAO,CAACe,GAAR,CAAYD,KAAZ;AACD,OAVH;AAWAd,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ,EAdyB,CAgBzB;AACA;AACA;AAEA;AACD,KArBD;AAsBD,GAvBD;AAwBD;KArDuBX,W","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\nimport FetchDepartures from \"./fetchDepartures\";\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchAction(date) {\n  console.log(date);\n  const request = axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/${date}`,\n    {\n      headers: {\n        Accept:\n          \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n        \"X-Busbud-Token\": `${token}`,\n      },\n    }\n  );\n\n  const requestTwo = axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/${date}/poll`,\n    {\n      headers: {\n        Accept:\n          \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n        \"X-Busbud-Token\": `${token}`,\n      },\n    }\n  );\n\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_ACTION\", payload: data });\n      //////\n      requestTwo\n        .then(({ data }) => {\n          const timer = setTimeout(() => {\n            dispatch({ type: \"FETCH_DEPARTURES\", payload: data });\n          }, 2000);\n          return () => timer;\n          dispatch({ type: \"FETCH_DEPARTURES\", payload: data });\n        })\n        .catch((error) => {\n          console.err(error);\n        });\n      console.log(data);\n\n      //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      //dispatch(FetchDepartures());\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/andresnieves/Documents/React/busbud/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/andresnieves/Documents/React/busbud/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/andresnieves/Documents/React/busbud/components/table.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Table from \"react-bootstrap/Table\";\nimport FetchAction from \"../redux/actions/fetchAction\";\n\nfunction ResultTable() {\n  _s();\n\n  var _this = this;\n\n  //1. We call \"useDispatch\" (React hook) to trigger our request petition\n  var dispatch = useDispatch(); //2. We define a function that combines dispatch function + redux action\n\n  var getFirstFetch = function getFirstFetch() {\n    return dispatch(FetchAction());\n  }; //3. We call useEffect to trigger the request function defined on item 2.\n  //The outcome will be saved on the redux store to be accessible from anywhere & anytime\n\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getFirstFetch();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n\n  var getData = function getData() {\n    getFirstFetch();\n  }; //Selectors\n\n\n  var oneFetch = useSelector(function (state) {\n    return state.firstFetch.mainInformation;\n  });\n  var departuresFetch = useSelector(function (state) {\n    return state.fetchDepartures.allDepartures;\n  });\n\n  function fetchRepoInfos() {\n    return _fetchRepoInfos.apply(this, arguments);\n  }\n\n  function _fetchRepoInfos() {\n    _fetchRepoInfos = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var repos, promises, results;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // load repository details for this array of repo URLs\n              repos = fetchInfo; // map through the repo list\n\n              promises = repos.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(repo) {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          return _context2.abrupt(\"return\", {\n                            name: repo.departure_time,\n                            description: repo.arrival_time\n                          });\n\n                        case 1:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()); // wait until all promises resolve\n\n              _context3.next = 4;\n              return Promise.all(promises);\n\n            case 4:\n              results = _context3.sent;\n              console.log(results); // use the results\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _fetchRepoInfos.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: fetchInfo.map(function (depart) {\n        /*#__PURE__*/\n        _jsxDEV(\"p\", {\n          children: depart.departure_time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getData,\n      children: \"Get data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResultTable, \"lQhjc8z8Q4utlQIUEbpbQSaQWdg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ResultTable;\nexport default ResultTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultTable\");","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/components/table.js"],"names":["React","useEffect","useState","useSelector","useDispatch","Table","FetchAction","ResultTable","dispatch","getFirstFetch","getData","oneFetch","state","firstFetch","mainInformation","departuresFetch","fetchDepartures","allDepartures","fetchRepoInfos","repos","fetchInfo","promises","map","repo","name","departure_time","description","arrival_time","Promise","all","results","console","log","depart"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AAAA;;AACrB;AACA,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CAFqB,CAIrB;;AACA,MAAMK,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAMD,QAAQ,CAACF,WAAW,EAAZ,CAAd;AAAA,GAAtB,CALqB,CAOrB;AACA;;;AACAL,EAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFQ,aAAa,EADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAEN,EAFM,CAAT;;AAIA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBD,IAAAA,aAAa;AACd,GAFD,CAbqB,CAgBrB;;;AACA,MAAME,QAAQ,GAAGR,WAAW,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACC,UAAN,CAAiBC,eAA5B;AAAA,GAAD,CAA5B;AACA,MAAMC,eAAe,GAAGZ,WAAW,CACjC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACI,eAAN,CAAsBC,aAAjC;AAAA,GADiC,CAAnC;;AAlBqB,WAsBNC,cAtBM;AAAA;AAAA;;AAAA;AAAA,+EAsBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AACMC,cAAAA,KAFR,GAEgBC,SAFhB,EAIE;;AACMC,cAAAA,QALR,GAKmBF,KAAK,CAACG,GAAN;AAAA,qFAAU,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,4DAClB;AACLC,4BAAAA,IAAI,EAAED,IAAI,CAACE,cADN;AAELC,4BAAAA,WAAW,EAAEH,IAAI,CAACI;AAFb,2BADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAV;;AAAA;AAAA;AAAA;AAAA,kBALnB,EAYE;;AAZF;AAAA,qBAawBC,OAAO,CAACC,GAAR,CAAYR,QAAZ,CAbxB;;AAAA;AAaQS,cAAAA,OAbR;AAcEC,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAdF,CAeE;;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtBqB;AAAA;AAAA;;AAwCrB,sBACE;AAAA,4BACE;AAAA,gBACGV,SAAS,CAACE,GAAV,CAAc,UAACW,MAAD,EAAY;AACzB;AAAA;AAAA,oBAAIA,MAAM,CAACR;AAAX;AAAA;AAAA;AAAA;AAAA;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAQ,MAAA,OAAO,EAAEf,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAlDQH,W;UAEUH,W,EAeAD,W,EACOA,W;;;KAlBjBI,W;AAoDT,eAAeA,WAAf","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Table from \"react-bootstrap/Table\";\nimport FetchAction from \"../redux/actions/fetchAction\";\n\nfunction ResultTable() {\n  //1. We call \"useDispatch\" (React hook) to trigger our request petition\n  const dispatch = useDispatch();\n\n  //2. We define a function that combines dispatch function + redux action\n  const getFirstFetch = () => dispatch(FetchAction());\n\n  //3. We call useEffect to trigger the request function defined on item 2.\n  //The outcome will be saved on the redux store to be accessible from anywhere & anytime\n  useEffect(async () => {\n    await getFirstFetch();\n  }, []);\n\n  const getData = () => {\n    getFirstFetch();\n  };\n  //Selectors\n  const oneFetch = useSelector((state) => state.firstFetch.mainInformation);\n  const departuresFetch = useSelector(\n    (state) => state.fetchDepartures.allDepartures\n  );\n\n  async function fetchRepoInfos() {\n    // load repository details for this array of repo URLs\n    const repos = fetchInfo;\n\n    // map through the repo list\n    const promises = repos.map(async (repo) => {\n      return {\n        name: repo.departure_time,\n        description: repo.arrival_time,\n      };\n    });\n\n    // wait until all promises resolve\n    const results = await Promise.all(promises);\n    console.log(results);\n    // use the results\n  }\n\n  return (\n    <div>\n      <div>\n        {fetchInfo.map((depart) => {\n          <p>{depart.departure_time}</p>;\n        })}\n      </div>\n      <button onClick={getData}>Get data</button>\n    </div>\n  );\n}\n\nexport default ResultTable;\n"]},"metadata":{},"sourceType":"module"}
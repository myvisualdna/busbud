{"ast":null,"code":"import _defineProperty from \"/Users/andresnieves/Documents/React/busbud/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nimport FetchDepartures from \"./fetchDepartures\";\nvar token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nvar headers = {\n  Authorization: \"Bearer \".concat(token)\n}; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchAction(date) {\n  console.log(date);\n  var request = axios.get(\"https://napi.busbud.com/x-departures/f2m673/f25dvk/\".concat(date), {\n    headers: {\n      Accept: \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n      \"X-Busbud-Token\": \"\".concat(token)\n    }\n  });\n\n  switch (action.type) {\n    case \"FETCH_ACTION\":\n      // this means the call is pending in the browser and has not\n      // yet returned a response\n      return _objectSpread(_objectSpread({}, state), {}, {\n        payload: data\n      });\n\n    case \"GET_CUSTOMERS_FULFILLED\": // this means the call is successful and the response has been set\n    // to action.payload\n\n    case \"GET_CUSTOMERS_REJECTED\": // this means the response was unsuccessful so you can handle that\n    // error here\n\n    default:\n      return state;\n  } //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n\n  return function (dispatch) {\n    request.then(function (_ref) {\n      var data = _ref.data;\n      dispatch({\n        type: \"FETCH_ACTION\",\n        payload: data\n      });\n      console.log(data); //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      dispatch(FetchDepartures());\n    });\n  };\n}\n_c = FetchAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchAction\");","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/actions/fetchAction.js"],"names":["axios","FetchDepartures","token","headers","Authorization","FetchAction","date","console","log","request","get","Accept","action","type","state","payload","data","dispatch","then"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,IAAMC,KAAK,GAAG,gCAAd;AACA,IAAMC,OAAO,GAAG;AAAEC,EAAAA,aAAa,mBAAYF,KAAZ;AAAf,CAAhB,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASG,WAAT,CAAqBC,IAArB,EAA2B;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,MAAMG,OAAO,GAAGT,KAAK,CAACU,GAAN,8DACwCJ,IADxC,GAEd;AACEH,IAAAA,OAAO,EAAE;AACPQ,MAAAA,MAAM,EACJ,+EAFK;AAGP,kCAAqBT,KAArB;AAHO;AADX,GAFc,CAAhB;;AAWA,UAAQU,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE;AACA;AACA,6CACKC,KADL;AAEEC,QAAAA,OAAO,EAAEC;AAFX;;AAIF,SAAK,yBAAL,CARF,CASE;AACA;;AAEA,SAAK,wBAAL,CAZF,CAaE;AACA;;AAEA;AACE,aAAOF,KAAP;AAjBJ,GAbwC,CAgCxC;AACA;AACA;AACA;AACA;;;AACA,SAAO,UAACG,QAAD,EAAc;AACnBR,IAAAA,OAAO,CAACS,IAAR,CAAa,gBAAc;AAAA,UAAXF,IAAW,QAAXA,IAAW;AACzBC,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE,cAAR;AAAwBE,QAAAA,OAAO,EAAEC;AAAjC,OAAD,CAAR;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ,EAFyB,CAIzB;AACA;AACA;;AAEAC,MAAAA,QAAQ,CAAChB,eAAe,EAAhB,CAAR;AACD,KATD;AAUD,GAXD;AAYD;KAjDuBI,W","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\nimport FetchDepartures from \"./fetchDepartures\";\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nconst headers = { Authorization: `Bearer ${token}` };\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchAction(date) {\n  console.log(date);\n  const request = axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/${date}`,\n    {\n      headers: {\n        Accept:\n          \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n        \"X-Busbud-Token\": `${token}`,\n      },\n    }\n  );\n\n  switch (action.type) {\n    case \"FETCH_ACTION\":\n      // this means the call is pending in the browser and has not\n      // yet returned a response\n      return {\n        ...state,\n        payload: data,\n      };\n    case \"GET_CUSTOMERS_FULFILLED\":\n    // this means the call is successful and the response has been set\n    // to action.payload\n\n    case \"GET_CUSTOMERS_REJECTED\":\n    // this means the response was unsuccessful so you can handle that\n    // error here\n\n    default:\n      return state;\n  }\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_ACTION\", payload: data });\n      console.log(data);\n\n      //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      dispatch(FetchDepartures());\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nimport FetchDepartures from \"./fetchDepartures\";\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nconst config = {\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n};\nconst bodyParameters = {\n  key: \"value\"\n}; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchAction(city) {\n  const request = axios.get(`https://napi.busbud.com/x-departures/f2m673/f25dvk/2020-12-15`, bodyParameters, config); //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n  return dispatch => {\n    request.then(({\n      data\n    }) => {\n      dispatch({\n        type: \"FETCH_ACTION\",\n        payload: data\n      }); //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n      //dispatch(FetchDepartures());\n    });\n  };\n}","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/actions/fetchAction.js"],"names":["axios","FetchDepartures","token","config","headers","Authorization","bodyParameters","key","FetchAction","city","request","get","dispatch","then","data","type","payload"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,MAAMC,KAAK,GAAG,gCAAd;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,aAAa,EAAG,UAASH,KAAM;AAAjC;AADI,CAAf;AAIA,MAAMI,cAAc,GAAG;AACrBC,EAAAA,GAAG,EAAE;AADgB,CAAvB,C,CAIA;AACA;AACA;AACA;;AACA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACxC,QAAMC,OAAO,GAAGV,KAAK,CAACW,GAAN,CACb,+DADa,EAEdL,cAFc,EAGdH,MAHc,CAAhB,CADwC,CAOxC;AACA;AACA;AACA;AACA;;AACA,SAAQS,QAAD,IAAc;AACnBF,IAAAA,OAAO,CAACG,IAAR,CAAa,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACzBF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,OAAO,EAAEF;AAAjC,OAAD,CAAR,CADyB,CAGzB;AACA;AACA;AAEA;AACD,KARD;AASD,GAVD;AAWD","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\nimport FetchDepartures from \"./fetchDepartures\";\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nconst config = {\n  headers: { Authorization: `Bearer ${token}` },\n};\n\nconst bodyParameters = {\n  key: \"value\",\n};\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchAction(city) {\n  const request = axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/2020-12-15`,\n    bodyParameters,\n    config\n  );\n\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_ACTION\", payload: data });\n\n      //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      //dispatch(FetchDepartures());\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/andresnieves/Documents/React/busbud/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/andresnieves/Documents/React/busbud/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nvar token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\"; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchDepartures(_x) {\n  return _FetchDepartures.apply(this, arguments);\n}\n_c2 = FetchDepartures;\n\nfunction _FetchDepartures() {\n  _FetchDepartures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(city) {\n    var request;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"https://napi.busbud.com/x-departures/f2m673/f25dvk/2020-12-15/poll\", {\n              headers: {\n                Accept: \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n                \"X-Busbud-Token\": \"\".concat(token)\n              }\n            });\n\n          case 2:\n            request = _context.sent;\n            return _context.abrupt(\"return\", function (dispatch) {\n              request.then(function (_ref) {\n                var data = _ref.data;\n                dispatch({\n                  type: \"FETCH_DEPARTURES\",\n                  payload: data\n                });\n                console.log(data);\n              });\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _FetchDepartures.apply(this, arguments);\n}\n\n_c = FetchDepartures;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FetchDepartures\");\n$RefreshReg$(_c2, \"FetchDepartures\");","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/actions/fetchDepartures.js"],"names":["axios","token","FetchDepartures","city","get","headers","Accept","request","dispatch","then","data","type","payload","console","log"],"mappings":";;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,IAAMC,KAAK,GAAG,gCAAd,C,CAEA;AACA;AACA;AACA;;AACA,wBAA8BC,eAA9B;AAAA;AAAA;MAA8BA,e;;;8EAAf,iBAA+BC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACSH,KAAK,CAACI,GAAN,uEAEpB;AACEC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EACJ,+EAFK;AAGP,4CAAqBL,KAArB;AAHO;AADX,aAFoB,CADT;;AAAA;AACPM,YAAAA,OADO;AAAA,6CAiBN,UAACC,QAAD,EAAc;AACnBD,cAAAA,OAAO,CAACE,IAAR,CAAa,gBAAc;AAAA,oBAAXC,IAAW,QAAXA,IAAW;AACzBF,gBAAAA,QAAQ,CAAC;AAAEG,kBAAAA,IAAI,EAAE,kBAAR;AAA4BC,kBAAAA,OAAO,EAAEF;AAArC,iBAAD,CAAR;AACAG,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACD,eAHD;AAID,aAtBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;KAAeR,e","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default async function FetchDepartures(city) {\n  const request = await axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/2020-12-15/poll`,\n    {\n      headers: {\n        Accept:\n          \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n        \"X-Busbud-Token\": `${token}`,\n      },\n    }\n  );\n\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_DEPARTURES\", payload: data });\n      console.log(data);\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
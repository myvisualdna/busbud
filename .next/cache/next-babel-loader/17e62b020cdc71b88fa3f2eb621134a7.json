{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nimport FetchDepartures from \"./fetchDepartures\";\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nconst headers = {\n  Authorization: `Bearer ${token}`\n}; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchAction(date) {\n  console.log(date);\n  const request = axios.get(`https://napi.busbud.com/x-departures/f2m673/f25dvk/${date}`, {\n    headers: {\n      Accept: \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n      \"X-Busbud-Token\": `${token}`\n    }\n  });\n\n  switch (action.type) {\n    case 'FETCH_ACTION':\n      // this means the call is pending in the browser and has not\n      // yet returned a response\n      return _objectSpread({}, state);\n\n    case 'GET_CUSTOMERS_FULFILLED': // this means the call is successful and the response has been set\n    // to action.payload\n\n    case 'GET_CUSTOMERS_REJECTED': // this means the response was unsuccessful so you can handle that\n    // error here\n\n    default:\n      return state;\n  } //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n\n  return dispatch => {\n    request.then(({\n      data\n    }) => {\n      dispatch({\n        type: \"FETCH_ACTION\",\n        payload: data\n      });\n      console.log(data); //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      dispatch(FetchDepartures());\n    });\n  };\n}","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/actions/fetchAction.js"],"names":["axios","FetchDepartures","token","headers","Authorization","FetchAction","date","console","log","request","get","Accept","action","type","state","dispatch","then","data","payload"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,MAAMC,KAAK,GAAG,gCAAd;AACA,MAAMC,OAAO,GAAG;AAAEC,EAAAA,aAAa,EAAG,UAASF,KAAM;AAAjC,CAAhB,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASG,WAAT,CAAqBC,IAArB,EAA2B;AAGxCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,QAAMG,OAAO,GAAGT,KAAK,CAACU,GAAN,CACb,sDAAqDJ,IAAK,EAD7C,EAEd;AACEH,IAAAA,OAAO,EAAE;AACPQ,MAAAA,MAAM,EACJ,+EAFK;AAGP,wBAAmB,GAAET,KAAM;AAHpB;AADX,GAFc,CAAhB;;AAWA,UAAQU,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE;AACA;AACA,+BACKC,KADL;;AAGF,SAAK,yBAAL,CAPF,CAQI;AACA;;AAEF,SAAK,wBAAL,CAXF,CAYI;AACA;;AAEF;AACE,aAAOA,KAAP;AAhBJ,GAfwC,CAiCxC;AACA;AACA;AACA;AACA;;;AACA,SAAQC,QAAD,IAAc;AACnBN,IAAAA,OAAO,CAACO,IAAR,CAAa,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACzBF,MAAAA,QAAQ,CAAC;AAAEF,QAAAA,IAAI,EAAE,cAAR;AAAwBK,QAAAA,OAAO,EAAED;AAAjC,OAAD,CAAR;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ,EAFyB,CAIzB;AACA;AACA;;AAEAF,MAAAA,QAAQ,CAACd,eAAe,EAAhB,CAAR;AACD,KATD;AAUD,GAXD;AAYD","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\nimport FetchDepartures from \"./fetchDepartures\";\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nconst headers = { Authorization: `Bearer ${token}` };\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchAction(date) {\n\n  \n  console.log(date); \n  const request = axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/${date}`,\n    {\n      headers: {\n        Accept:\n          \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n        \"X-Busbud-Token\": `${token}`,\n      },\n    }\n  );\n\n  switch (action.type) {\n    case 'FETCH_ACTION':\n      // this means the call is pending in the browser and has not\n      // yet returned a response\n      return {\n        ...state\n      }\n    case 'GET_CUSTOMERS_FULFILLED':\n      // this means the call is successful and the response has been set\n      // to action.payload\n      \n    case 'GET_CUSTOMERS_REJECTED':\n      // this means the response was unsuccessful so you can handle that\n      // error here\n      \n    default:\n      return state;\n  }\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_ACTION\", payload: data });\n      console.log(data);\n\n      //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      dispatch(FetchDepartures());\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nvar token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\"; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchDepartures(city) {\n  var request = axios.get(\"https://napi.busbud.com/x-departures/f2m673/f25dvk/2020-12-15/poll\", {\n    headers: {\n      Accept: \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n      \"X-Busbud-Token\": \"\".concat(token)\n    }\n  }); //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n  return function (dispatch) {\n    request.then(function (_ref) {\n      var data = _ref.data;\n      dispatch({\n        type: \"FETCH_DEPARTURES\",\n        payload: data\n      });\n      console;\n    });\n  };\n}\n_c = FetchDepartures;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchDepartures\");","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/actions/fetchDepartures.js"],"names":["axios","token","FetchDepartures","city","request","get","headers","Accept","dispatch","then","data","type","payload","console"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,IAAMC,KAAK,GAAG,gCAAd,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC5C,MAAMC,OAAO,GAAGJ,KAAK,CAACK,GAAN,uEAEd;AACEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,+EAFK;AAGP,kCAAqBN,KAArB;AAHO;AADX,GAFc,CAAhB,CAD4C,CAY5C;AACA;AACA;AACA;AACA;;AACA,SAAO,UAACO,QAAD,EAAc;AACnBJ,IAAAA,OAAO,CAACK,IAAR,CAAa,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACzBF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,kBAAR;AAA4BC,QAAAA,OAAO,EAAEF;AAArC,OAAD,CAAR;AACAG,MAAAA,OAAO;AACR,KAHD;AAID,GALD;AAMD;KAvBuBX,e","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchDepartures(city) {\n  const request = axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/2020-12-15/poll`,\n    {\n      headers: {\n        Accept:\n          \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n        \"X-Busbud-Token\": `${token}`,\n      },\n    }\n  );\n\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_DEPARTURES\", payload: data });\n      console\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
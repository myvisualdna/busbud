{"ast":null,"code":"//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\"; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\nexport default function FetchAction(date) {\n  const request = axios.get(`https://napi.busbud.com/x-departures/f2m673/f25dvk/${date}`, {\n    headers: {\n      Accept: \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n      \"X-Busbud-Token\": `${token}`\n    }\n  });\n  const requestTwo = axios.get(`https://napi.busbud.com/x-departures/f2m673/f25dvk/${date}/poll`, {\n    headers: {\n      Accept: \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n      \"X-Busbud-Token\": `${token}`\n    }\n  }); //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n  return dispatch => {\n    request.then(({\n      data\n    }) => {\n      dispatch({\n        type: \"FETCH_ACTION\",\n        payload: data\n      }); //////\n\n      requestTwo.then(({\n        data\n      }) => {\n        dispatch({\n          type: \"FETCH_DEPARTURES\",\n          payload: data\n        });\n      }).catch(error => {\n        console.err(error);\n      });\n      console.log(data);\n    });\n  };\n}","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/actions/fetchAction.js"],"names":["axios","token","FetchAction","date","request","get","headers","Accept","requestTwo","dispatch","then","data","type","payload","catch","error","console","err","log"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,MAAMC,KAAK,GAAG,gCAAd,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAExC,QAAMC,OAAO,GAAGJ,KAAK,CAACK,GAAN,CACb,sDAAqDF,IAAK,EAD7C,EAEd;AACEG,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,+EAFK;AAGP,wBAAmB,GAAEN,KAAM;AAHpB;AADX,GAFc,CAAhB;AAWA,QAAMO,UAAU,GAAGR,KAAK,CAACK,GAAN,CAChB,sDAAqDF,IAAK,OAD1C,EAEjB;AACEG,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,+EAFK;AAGP,wBAAmB,GAAEN,KAAM;AAHpB;AADX,GAFiB,CAAnB,CAbwC,CAwBxC;AACA;AACA;AACA;AACA;;AACA,SAAQQ,QAAD,IAAc;AACnBL,IAAAA,OAAO,CAACM,IAAR,CAAa,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACzBF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,OAAO,EAAEF;AAAjC,OAAD,CAAR,CADyB,CAEzB;;AACAH,MAAAA,UAAU,CACPE,IADH,CACQ,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AAClBF,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,OAAO,EAAEF;AAArC,SAAD,CAAR;AACD,OAHH,EAIGG,KAJH,CAIUC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OANH;AAOAC,MAAAA,OAAO,CAACE,GAAR,CAAYP,IAAZ;AACD,KAXD;AAYD,GAbD;AAcD","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchAction(date) {\n\n  const request = axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/${date}`,\n    {\n      headers: {\n        Accept:\n          \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n        \"X-Busbud-Token\": `${token}`,\n      },\n    }\n  );\n\n  const requestTwo = axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/${date}/poll`,\n    {\n      headers: {\n        Accept:\n          \"application/vnd.busbud+json; version=2; profile=https://schema.busbud.com/v2/\",\n        \"X-Busbud-Token\": `${token}`,\n      },\n    }\n  );\n\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_ACTION\", payload: data });\n      //////\n      requestTwo\n        .then(({ data }) => {\n          dispatch({ type: \"FETCH_DEPARTURES\", payload: data });\n        })\n        .catch((error) => {\n          console.err(error);\n        });\n      console.log(data);\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
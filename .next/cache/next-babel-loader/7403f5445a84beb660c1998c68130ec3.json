{"ast":null,"code":"//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\nimport axios from \"axios\"; //Importamos la accion que queremos despachar al final\n\nimport FetchDepartures from \"./fetchDepartures\";\nvar token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nvar headers = {\n  Authorization: \"Bearer \".concat(token)\n};\n\nvar instance = function instance(token) {\n  return axios.create({\n    baseURL: \"\".concat(config.API_URL),\n    timeout: 1000,\n    headers: {\n      'authorization': 'Bearer ' + token\n    }\n  });\n}; //Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\n\n\nexport default function FetchAction(city) {\n  var request = axios.get(\"https://napi.busbud.com/x-departures/f2m673/f25dvk/2020-12-15\", {\n    headers: headers\n  }); //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n\n  return function (dispatch) {\n    request.then(function (_ref) {\n      var data = _ref.data;\n      dispatch({\n        type: \"FETCH_ACTION\",\n        payload: data\n      }); //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n      //dispatch(FetchDepartures());\n    });\n  };\n}\n_c = FetchAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchAction\");","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/actions/fetchAction.js"],"names":["axios","FetchDepartures","token","headers","Authorization","instance","create","baseURL","config","API_URL","timeout","FetchAction","city","request","get","dispatch","then","data","type","payload"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,IAAMC,KAAK,GAAG,gCAAd;AACA,IAAMC,OAAO,GAAG;AAAEC,EAAAA,aAAa,mBAAYF,KAAZ;AAAf,CAAhB;;AACA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACH,KAAD;AAAA,SAAWF,KAAK,CAACM,MAAN,CAAa;AAAIC,IAAAA,OAAO,YAAKC,MAAM,CAACC,OAAZ,CAAX;AAAoCC,IAAAA,OAAO,EAAE,IAA7C;AAAqDP,IAAAA,OAAO,EAAE;AAAE,uBAAiB,YAAYD;AAA/B;AAA9D,GAAb,CAAX;AAAA,CAAjB,C,CAEA;AACA;AACA;AACA;;;AACA,eAAe,SAASS,WAAT,CAAqBC,IAArB,EAA2B;AACxC,MAAMC,OAAO,GAAGb,KAAK,CAACc,GAAN,kEAEd;AAAEX,IAAAA,OAAO,EAAPA;AAAF,GAFc,CAAhB,CADwC,CAMxC;AACA;AACA;AACA;AACA;;AACA,SAAO,UAACY,QAAD,EAAc;AACnBF,IAAAA,OAAO,CAACG,IAAR,CAAa,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACzBF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,OAAO,EAAEF;AAAjC,OAAD,CAAR,CADyB,CAGzB;AACA;AACA;AAEA;AACD,KARD;AASD,GAVD;AAWD;KAtBuBN,W","sourcesContent":["//Esta es una accion ASYNCRONA:\n//Ejecuta una accion (llama a un api) y llama a una\n//segunda accion (pasandole lo que recogio de la API)\n\nimport axios from \"axios\";\n//Importamos la accion que queremos despachar al final\nimport FetchDepartures from \"./fetchDepartures\";\n\nconst token = \"PARTNER_BaASYYHxTxuOINEOMWq5GA\";\nconst headers = { Authorization: `Bearer ${token}` };\nconst instance = (token) => axios.create({   baseURL: `${config.API_URL}`,   timeout: 1000,   headers :{ 'authorization': 'Bearer ' + token } })\n\n//Esta es una funcion asyncrona: es decir no solo ejecuta\n//una accion (llamando a la primera api), sino que tambien despacha\n//una segunda accion (fetchOneApi) pasando los valores\n//obtuvo de la respuesta de esta API\nexport default function FetchAction(city) {\n  const request = axios.get(\n    `https://napi.busbud.com/x-departures/f2m673/f25dvk/2020-12-15`,\n    { headers }\n  );\n\n  //Lo levantado por la API se llamara data.\n  //Se dispara una accion llamada FETCH_WEATHER que de ser\n  //admitida por el reducer modificara el state con lo que\n  //contenga el payload: es decir data, es decir lo levantado\n  //por la API\n  return (dispatch) => {\n    request.then(({ data }) => {\n      dispatch({ type: \"FETCH_ACTION\", payload: data });\n\n      //Recogimos info de la API, le damos nombre y\n      //despachamos una nueva accion, pasandole esos\n      //valores\n\n      //dispatch(FetchDepartures());\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
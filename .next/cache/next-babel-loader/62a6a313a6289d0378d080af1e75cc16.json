{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//We define the reducer and how the ta\nconst initialState = {\n  mainInformation: {},\n  allDepartures: []\n}; //Creamos el reducer, recibe el state inicial y una action\n\nconst firstFetch = (state = initialState, action) => {\n  switch (action.type) {\n    case \"FETCH_ACTION\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainInformation: action.payload\n      });\n\n    case \"FETCH_DEPARTURES\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allDepartures: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default firstFetch;","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/busbud/redux/reducers/reducerAction.js"],"names":["initialState","mainInformation","allDepartures","firstFetch","state","action","type","payload"],"mappings":";;;;;;AAAA;AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,EADE;AAEnBC,EAAAA,aAAa,EAAE;AAFI,CAArB,C,CAKA;;AACA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,6CAAYF,KAAZ;AAAmBH,QAAAA,eAAe,EAAEI,MAAM,CAACE;AAA3C;;AACF,SAAK,kBAAL;AACE,6CAAYH,KAAZ;AAAmBF,QAAAA,aAAa,EAAEG,MAAM,CAACE;AAAzC;;AACF;AACE,aAAOH,KAAP;AANJ;AAQD,CATD;;AAWA,eAAeD,UAAf","sourcesContent":["//We define the reducer and how the ta\nconst initialState = {\n  mainInformation: {},\n  allDepartures: [],\n};\n\n//Creamos el reducer, recibe el state inicial y una action\nconst firstFetch = (state = initialState, action) => {\n  switch (action.type) {\n    case \"FETCH_ACTION\":\n      return { ...state, mainInformation: action.payload };\n    case \"FETCH_DEPARTURES\":\n      return { ...state, allDepartures: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default firstFetch;\n"]},"metadata":{},"sourceType":"module"}